#pragma once
#include "InOut.h"

namespace Mind
{
	class iConcept;
	class iConceptInteractTable;
	
	//////////////////////////////////////////////////////////////////////////
	///iConceptEdge is an edge between two concepts.
	///It has direction and contains information of one concept that the other concept depends on.
	///It also contains information description about how other concepts depend on the concept in <me>.
	//////////////////////////////////////////////////////////////////////////
	class _MINDINTERFACEINOUT iConceptEdge: public Obj<iConceptEdge>
	{
	public:
		iConceptEdge(void);
		virtual ~iConceptEdge(void);

		//////////////////////////////////////////////////////////////////////////
		///Get the concept in <me>.
		//////////////////////////////////////////////////////////////////////////
		virtual shared_ptr<iConcept> GetConcept() const=0;
		
		//////////////////////////////////////////////////////////////////////////
		///Get the sensitivity to the concept in <me>.
		//////////////////////////////////////////////////////////////////////////
		virtual double GetSensitivity() const =0;
		//////////////////////////////////////////////////////////////////////////
		///Set the sensitivity to the concept in <me>.
		///<val> is from -1 (negative) to 1(positive)
		//////////////////////////////////////////////////////////////////////////
		virtual void SetSensitivity(double val) =0;

		
		//////////////////////////////////////////////////////////////////////////
		///Add the modification of the concept in <me>.
		///Modification describes how to depend the concept in <me>.
		//////////////////////////////////////////////////////////////////////////
		virtual void AddModification(const shared_ptr<iConcept> modification) =0;
		//////////////////////////////////////////////////////////////////////////
		///Add the modification of the concept in <me>.
		///<table> can describe complicated modification than concept does.
		//////////////////////////////////////////////////////////////////////////
		virtual void AddModification(const shared_ptr<iConceptInteractTable> table) =0;

		//////////////////////////////////////////////////////////////////////////
		///Get the modification represented as a iConceptInteractTable which contains concept pairs 
		///and describe the relation graph about <me>.
				//////////////////////////////////////////////////////////////////////////
		virtual shared_ptr<iConceptInteractTable> GetModification() const =0;

		//////////////////////////////////////////////////////////////////////////
		//Build the deep interaction table of <me> including the interaction from modifications to "to concept".
		//////////////////////////////////////////////////////////////////////////
		virtual shared_ptr<iConceptInteractTable> GetSelfDeepInteract() const =0;

		//////////////////////////////////////////////////////////////////////////
		///Check whether the description of <me> to a concept is exactly matched with <description>.
		//////////////////////////////////////////////////////////////////////////
		virtual bool MatchWithConceptTable(const shared_ptr<iConceptInteractTable> description) const =0;
		virtual bool MatchWithConceptTable(const shared_ptr<iConceptInteractTable> description,shared_ptr<iConcept>& toConcept) const =0;
	};
}


